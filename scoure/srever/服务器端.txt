#ifdef _WIN32
//服务器端
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include<WinSock2.h>
#pragma comment(lib,"ws2_32")
#include<thread>
#include<iostream>
using namespace std;

#define BUFFSIZE 2048
#define DEFAULT_PORT 9999    // 指定端口为9999
#define MAXLINK 2048
char buf[BUFFSIZE] = { 0 }; // 用于收发数据
int sock, client, ret;    // 定义服务端套接字和客户端套接字



#elif __linux__
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <sys/socket.h>
#include <sys/unistd.h>
#include <sys/types.h>
#include <sys/errno.h>
#include <netinet/in.h>
#include<thread>
#include <signal.h>
#define BUFFSIZE 2048
#define DEFAULT_PORT 9999    // 指定端口为9999
#define MAXLINK 2048
char buf[BUFFSIZE] = { 0 }; // 用于收发数据
int sock, client, ret;    // 定义服务端套接字和客户端套接字
#endif

void f(int client)
{
	while (1)
	{
		recv(client, buf, sizeof(buf), 0);
		cout << "receive data :" << buf << endl;

		if (strcmp(buf, "quit") == 0)
		{
			break;
		}
		send(client, buf, strlen(buf) + 1, 0);
	}
};



int main()
{
	
#ifdef _WIN32
	WSADATA data;
	SOCKET ret = WSAStartup(MAKEWORD(2, 2), &data);
	if (ret)
	{
		cout << "初始化网络错误" << endl;
		return -1;
	}
#endif
	struct sockaddr_in addr;    // 用于存放ip和端口的结构
	// 对应伪代码中的sockfd = socket();
	sock = socket(AF_INET, SOCK_STREAM, 0);
	if (-1 == sock)
	{
		printf("创建套接字失败\n");
		return -1;
	}
	// END
	// 对应伪代码中的bind(sockfd, ip::port和一些配置);
#ifdef  __linux__
	bzero(&addr, sizeof(addr));
#endif 
	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = htonl(INADDR_ANY);
	addr.sin_port = htons(DEFAULT_PORT);
	if (-1 == bind(sock, (struct sockaddr*)&addr, sizeof(addr)))
	{
		printf("绑定地址端口失败\n");
		return -1;
	}
	// END
	// 对应伪代码中的listen(sockfd);    
	if (-1 == listen(sock, MAXLINK))
	{
		printf("监听套接字失败\n");
		return -1;
	}
	// END
	printf("listen.......\n");
	printf("start to accepct\n");
	//printf("client=%d\n", client);
	while (1)
	{
		client = accept(sock, NULL, NULL);
		printf("client=%d\n", client);
		thread t(f,client);//创建线程
		t.detach();//子线程与主线程分离
	}
	/*
	while (1)
	{
		recv(client, buf, sizeof(buf), 0);
		cout << "receive data :" << buf << endl;

		if (strcmp(buf, "quit") == 0)
		{
			break;
		}
		send(client, buf, strlen(buf) + 1, 0);
	}
	*/



#ifdef __linux__
	close(client);
	close(sock);
#elif _WIN32
	closesocket(client);
	closesocket(sock);
	WSACleanup();
#endif 
	return 0;
}




