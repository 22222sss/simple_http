#ifdef _WIN32
//客户端
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include<WinSock2.h>
#pragma comment(lib,"ws2_32")
#include<iostream>
using namespace std;
#define MAXLINK 2048
#define BUFFSIZE 2048
#define SERVER_IP "172.20.190.164"    // 指定服务端的IP，记得修改为你的服务端所在的ip
#define SERVER_PORT 9999            // 指定服务端的port
char buf[BUFFSIZE] = { 0 }; // 用于收发数据
int sock, client, ret;    // 定义服务端套接字和客户端套接字

#elif __linux__
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include<iostream>
#include <sys/socket.h>
#include <sys/unistd.h>
#include <sys/types.h>
#include <sys/errno.h>
#include <netinet/in.h>
#include <arpa/inet.h>
using namespace std;
#define BUFFSIZE 2048
#define SERVER_IP "172.20.190.164"    // 指定服务端的IP，记得修改为你的服务端所在的ip
#define SERVER_PORT 9999            // 指定服务端的port
char buf[BUFFSIZE] = { 0 }; // 用于收发数据
int sock, client, ret;    // 定义服务端套接字和客户端套接字
#endif
int main()
{
#ifdef _WIN32
    WSADATA data;
    SOCKET ret = WSAStartup(MAKEWORD(2, 2), &data);
    if (ret)
    {
        cout << "初始化网络错误" << endl;
        return -1;
    }
#endif

    struct sockaddr_in servaddr;
    char buff[BUFFSIZE];
    int sockfd;
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (-1 == sockfd)
    {
        printf("创建套接字失败\n");
        return -1;
    }
#ifdef  __linux__
    bzero(&servaddr, sizeof(servaddr));
#endif
    servaddr.sin_family = AF_INET;
#ifdef  __linux__
    inet_pton(AF_INET, SERVER_IP, &servaddr.sin_addr);
#elif _WIN32
    servaddr.sin_addr.s_addr = inet_addr(SERVER_IP);
#endif 
    servaddr.sin_port = htons(SERVER_PORT);
    if (-1 == connect(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr)))
    {
        cout << "连接服务器失败";
        return -1;
    }
    printf("Please input: \n");
    while (1)
    {
#ifdef _WIN32
        gets_s(buff);
#elif __linux__
        fgets(buff, BUFFSIZE , stdin);
#endif

        send(sockfd, buff, strlen(buff) + 1, 0);
        if (strcmp(buff, "quit") == 0)
        {
            break;
        }
        recv(sockfd, buff, sizeof(buff), 0);
        cout << "Receive data : " << buff << endl;
    }
#ifdef __linux__
    close(client);
    close(sock);
#elif _WIN32
    closesocket(client);
    closesocket(sock);
    WSACleanup();
#endif 
    return 0;
}


